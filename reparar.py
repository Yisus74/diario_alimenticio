#!/usr/bin/env python3
"""
Script de reparaci√≥n autom√°tica para el Diario de Alimentaci√≥n Consciente
Soluciona problemas comunes autom√°ticamente
"""

import os
import sys
import subprocess
from datetime import datetime

def ejecutar_comando(comando, descripcion):
    """Ejecuta un comando y muestra el resultado"""
    print(f"üîß {descripcion}...")
    try:
        result = subprocess.run(comando, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {descripcion} completado")
            return True
        else:
            print(f"‚ùå Error en {descripcion}: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Error ejecutando {descripcion}: {e}")
        return False

def crear_directorios():
    """Crea los directorios necesarios"""
    print("üìÅ Creando directorios necesarios...")
    
    directorios = ['templates', 'uploads']
    
    for directorio in directorios:
        try:
            os.makedirs(directorio, exist_ok=True)
            print(f"‚úÖ Directorio '{directorio}' listo")
        except Exception as e:
            print(f"‚ùå Error creando directorio '{directorio}': {e}")

def reinstalar_dependencias():
    """Reinstala todas las dependencias"""
    print("üì¶ Reinstalando dependencias...")
    
    if not os.path.exists('requirements.txt'):
        print("‚ùå requirements.txt no encontrado")
        return False
    
    # Desinstalar dependencias existentes
    ejecutar_comando("pip uninstall flask werkzeug reportlab jinja2 -y", 
                    "Desinstalando dependencias existentes")
    
    # Reinstalar dependencias
    return ejecutar_comando("pip install -r requirements.txt", 
                           "Instalando dependencias")

def reparar_base_datos():
    """Repara o recrea la base de datos"""
    print("üóÉÔ∏è Reparando base de datos...")
    
    # Hacer backup si existe
    if os.path.exists('diario_alimentacion.db'):
        backup_name = f"diario_alimentacion_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
        try:
            import shutil
            shutil.copy2('diario_alimentacion.db', backup_name)
            print(f"‚úÖ Backup creado: {backup_name}")
        except Exception as e:
            print(f"‚ö†Ô∏è  No se pudo crear backup: {e}")
    
    # Recrear base de datos
    try:
        if os.path.exists('database.py'):
            resultado = ejecutar_comando("python -c \"from database import init_database; init_database()\"", 
                                        "Recreando base de datos")
            return resultado
        else:
            print("‚ùå database.py no encontrado")
            return False
    except Exception as e:
        print(f"‚ùå Error reparando base de datos: {e}")
        return False

def verificar_y_reparar_flask():
    """Verifica y repara problemas espec√≠ficos de Flask"""
    print("üå∂Ô∏è Verificando Flask...")
    
    try:
        import flask
        version = flask.__version__
        print(f"‚úÖ Flask {version} detectado")
        
        # Verificar que la versi√≥n sea compatible
        version_parts = version.split('.')
        major = int(version_parts[0])
        minor = int(version_parts[1]) if len(version_parts) > 1 else 0
        
        if major < 2:
            print("‚ö†Ô∏è  Versi√≥n de Flask muy antigua, actualizando...")
            return ejecutar_comando("pip install --upgrade Flask>=2.0.0", 
                                   "Actualizando Flask")
        else:
            print("‚úÖ Versi√≥n de Flask compatible")
            return True
            
    except ImportError:
        print("‚ùå Flask no est√° instalado")
        return ejecutar_comando("pip install Flask>=2.0.0", 
                               "Instalando Flask")

def limpiar_cache():
    """Limpia los archivos de cache de Python"""
    print("üßπ Limpiando cache de Python...")
    
    import shutil
    
    # Eliminar __pycache__
    for root, dirs, files in os.walk('.'):
        for dir_name in dirs[:]:
            if dir_name == '__pycache__':
                try:
                    shutil.rmtree(os.path.join(root, dir_name))
                    print(f"‚úÖ Eliminado cache: {os.path.join(root, dir_name)}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  No se pudo eliminar {dir_name}: {e}")
    
    # Eliminar archivos .pyc
    for root, dirs, files in os.walk('.'):
        for file_name in files:
            if file_name.endswith('.pyc'):
                try:
                    os.remove(os.path.join(root, file_name))
                    print(f"‚úÖ Eliminado: {file_name}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  No se pudo eliminar {file_name}: {e}")

def test_aplicacion():
    """Prueba que la aplicaci√≥n se pueda importar correctamente"""
    print("üß™ Probando la aplicaci√≥n...")
    
    try:
        # Intentar importar m√≥dulos principales
        from database import init_database, DatabaseManager
        print("‚úÖ database.py importado correctamente")
        
        # Intentar importar app (sin ejecutar)
        import importlib.util
        spec = importlib.util.spec_from_file_location("app", "app.py")
        if spec is None:
            print("‚ùå No se pudo cargar app.py")
            return False
        
        print("‚úÖ app.py se puede cargar")
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando la aplicaci√≥n: {e}")
        return False

def menu_reparacion():
    """Muestra el men√∫ de opciones de reparaci√≥n"""
    print("\nüîß HERRAMIENTAS DE REPARACI√ìN")
    print("=" * 40)
    print("1. Reparaci√≥n completa (recomendado)")
    print("2. Solo reinstalar dependencias")
    print("3. Solo reparar base de datos")
    print("4. Solo verificar Flask")
    print("5. Solo limpiar cache")
    print("6. Crear directorios faltantes")
    print("7. Ejecutar diagn√≥stico")
    print("8. Verificaci√≥n r√°pida")
    print("0. Salir")
    print("=" * 40)
    
    try:
        opcion = input("Selecciona una opci√≥n (0-8): ").strip()
        return opcion
    except KeyboardInterrupt:
        print("\nüëã Operaci√≥n cancelada")
        return "0"

def reparacion_completa():
    """Ejecuta todas las reparaciones"""
    print("üöÄ INICIANDO REPARACI√ìN COMPLETA")
    print("=" * 50)
    
    pasos = [
        ("Creando directorios", crear_directorios),
        ("Limpiando cache", limpiar_cache),
        ("Verificando Flask", verificar_y_reparar_flask),
        ("Reinstalando dependencias", reinstalar_dependencias),
        ("Reparando base de datos", reparar_base_datos),
        ("Probando aplicaci√≥n", test_aplicacion)
    ]
    
    resultados = []
    for descripcion, funcion in pasos:
        print(f"\nüìã {descripcion}...")
        try:
            resultado = funcion()
            resultados.append(resultado)
            if resultado:
                print(f"‚úÖ {descripcion} completado")
            else:
                print(f"‚ùå {descripcion} fall√≥")
        except Exception as e:
            print(f"‚ùå Error en {descripcion}: {e}")
            resultados.append(False)
    
    exitos = sum(resultados)
    total = len(resultados)
    
    print(f"\nüìä RESULTADO: {exitos}/{total} pasos completados exitosamente")
    
    if exitos == total:
        print("üéâ ¬°Reparaci√≥n completada exitosamente!")
        print("   Ahora puedes ejecutar: python app.py")
    else:
        print("‚ö†Ô∏è  Algunos pasos fallaron. Revisa los errores arriba.")

def main():
    """Funci√≥n principal"""
    print("üîß HERRAMIENTA DE REPARACI√ìN")
    print("   Diario de Alimentaci√≥n Consciente")
    print("=" * 50)
    
    while True:
        opcion = menu_reparacion()
        
        if opcion == "0":
            print("üëã ¬°Hasta luego!")
            break
        elif opcion == "1":
            reparacion_completa()
        elif opcion == "2":
            reinstalar_dependencias()
        elif opcion == "3":
            reparar_base_datos()
        elif opcion == "4":
            verificar_y_reparar_flask()
        elif opcion == "5":
            limpiar_cache()
        elif opcion == "6":
            crear_directorios()
        elif opcion == "7":
            # Ejecutar diagn√≥stico
            try:
                import diagnostico
                diagnostico.main()
            except:
                ejecutar_comando("python diagnostico.py", "Ejecutando diagn√≥stico")
        elif opcion == "8":
            # Verificaci√≥n r√°pida
            try:
                import verificar
                verificar.main()
            except:
                ejecutar_comando("python verificar.py", "Ejecutando verificaci√≥n r√°pida")
        else:
            print("‚ùå Opci√≥n no v√°lida")
        
        if opcion != "0":
            input("\nPresiona Enter para continuar...")

if __name__ == "__main__":
    main()